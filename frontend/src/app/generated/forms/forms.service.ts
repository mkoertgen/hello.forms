/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Forms API
 * API for dynamic forms
 * OpenAPI spec version: 1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable } from '@angular/core';

import { Observable } from 'rxjs';

import type { Form } from '.././models';

type HttpClientOptions = {
  headers?:
    | HttpHeaders
    | {
        [header: string]: string | string[];
      };
  context?: HttpContext;
  observe?: any;
  params?:
    | HttpParams
    | {
        [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
      };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};

@Injectable({ providedIn: 'root' })
export class FormsService {
  constructor(private http: HttpClient) {}
  formsControllerFindAll<TData = Form[]>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  formsControllerFindAll<TData = Form[]>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  formsControllerFindAll<TData = Form[]>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  formsControllerFindAll<TData = Form[]>(options?: HttpClientOptions): Observable<TData> {
    return this.http.get<TData>(`/forms`, options);
  }
  formsControllerCreate<TData = Form>(
    form: Form,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  formsControllerCreate<TData = Form>(
    form: Form,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  formsControllerCreate<TData = Form>(
    form: Form,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  formsControllerCreate<TData = Form>(form: Form, options?: HttpClientOptions): Observable<TData> {
    return this.http.post<TData>(`/forms`, form, options);
  }
  formsControllerFindOne<TData = Form>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  formsControllerFindOne<TData = Form>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  formsControllerFindOne<TData = Form>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  formsControllerFindOne<TData = Form>(id: string, options?: HttpClientOptions): Observable<TData> {
    return this.http.get<TData>(`/forms/${id}`, options);
  }
  formsControllerPatch<TData = Form>(
    id: string,
    form: Form,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  formsControllerPatch<TData = Form>(
    id: string,
    form: Form,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  formsControllerPatch<TData = Form>(
    id: string,
    form: Form,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  formsControllerPatch<TData = Form>(
    id: string,
    form: Form,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.patch<TData>(`/forms/${id}`, form, options);
  }
  formsControllerRemove<TData = void>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  formsControllerRemove<TData = void>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  formsControllerRemove<TData = void>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  formsControllerRemove<TData = void>(id: string, options?: HttpClientOptions): Observable<TData> {
    return this.http.delete<TData>(`/forms/${id}`, options);
  }
}

export type FormsControllerFindAllClientResult = NonNullable<Form[]>;
export type FormsControllerCreateClientResult = NonNullable<Form>;
export type FormsControllerFindOneClientResult = NonNullable<Form>;
export type FormsControllerPatchClientResult = NonNullable<Form>;
export type FormsControllerRemoveClientResult = NonNullable<void>;
