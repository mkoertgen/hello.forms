/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Hello Forms API
 * API for dynamic forms
 * OpenAPI spec version: 1.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';

import type { Form } from './models';

export const getFormsControllerFindAllResponseMock = (): Form[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({}));

export const getFormsControllerCreateResponseMock = (
  overrideResponse: Partial<Form> = {}
): Form => ({ ...overrideResponse });

export const getFormsControllerFindOneResponseMock = (
  overrideResponse: Partial<Form> = {}
): Form => ({ ...overrideResponse });

export const getFormsControllerUpdateResponseMock = (
  overrideResponse: Partial<Form> = {}
): Form => ({ ...overrideResponse });

export const getAppControllerGetHelloMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)
) => {
  return http.get('*/', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getFormsControllerFindAllMockHandler = (
  overrideResponse?:
    | Form[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Form[]> | Form[])
) => {
  return http.get('*/forms', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFormsControllerFindAllResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getFormsControllerCreateMockHandler = (
  overrideResponse?:
    | Form
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Form> | Form)
) => {
  return http.post('*/forms', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFormsControllerCreateResponseMock()
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getFormsControllerFindOneMockHandler = (
  overrideResponse?:
    | Form
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Form> | Form)
) => {
  return http.get('*/forms/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFormsControllerFindOneResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getFormsControllerUpdateMockHandler = (
  overrideResponse?:
    | Form
    | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Form> | Form)
) => {
  return http.put('*/forms/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFormsControllerUpdateResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getFormsControllerRemoveMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)
) => {
  return http.delete('*/forms/:id', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};
export const getHelloFormsAPIMock = () => [
  getAppControllerGetHelloMockHandler(),
  getFormsControllerFindAllMockHandler(),
  getFormsControllerCreateMockHandler(),
  getFormsControllerFindOneMockHandler(),
  getFormsControllerUpdateMockHandler(),
  getFormsControllerRemoveMockHandler(),
];
