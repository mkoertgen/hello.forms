/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Forms API
 * A comprehensive API for managing dynamic forms with OpenAPI validation
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type {
  Form,
  GetFormsIdOpenapi200One,
  PostFormsIdSubmit201,
  PostFormsIdValidate200,
} from "./models";

export const getGetFormsResponseMock = (): Form[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    title: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    metadata: faker.helpers.arrayElement([
      {
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        version: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        author: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        tags: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          undefined,
        ]),
        lastModified: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          undefined,
        ]),
      },
      undefined,
    ]),
    fields: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.helpers.arrayElement([
        "text",
        "email",
        "tel",
        "url",
        "number",
        "date",
        "datetime-local",
        "checkbox",
        "select",
        "radio",
        "textarea",
        "file",
      ] as const),
      label: faker.string.alpha({ length: { min: 10, max: 20 } }),
      required: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      defaultValue: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          faker.datatype.boolean(),
        ]),
        undefined,
      ]),
      placeholder: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      helpText: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      validation: faker.helpers.arrayElement([
        {
          required: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          minLength: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          maxLength: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          min: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          max: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          pattern: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          customMessage: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        },
        undefined,
      ]),
      options: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() =>
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            {
              value: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              label: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
          ]),
        ),
        undefined,
      ]),
      conditional: faker.helpers.arrayElement([
        {
          show: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          when: faker.helpers.arrayElement([
            {
              field: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              operator: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  "equals",
                  "notEquals",
                  "contains",
                  "greaterThan",
                  "lessThan",
                ] as const),
                undefined,
              ]),
              value: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2,
                  }),
                  faker.datatype.boolean(),
                ]),
                undefined,
              ]),
            },
            undefined,
          ]),
        },
        undefined,
      ]),
    })),
    steps: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        title: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        order: faker.number.int({ min: undefined, max: undefined }),
        fields: Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        conditionalLogic: faker.helpers.arrayElement([
          {
            show: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
            when: faker.helpers.arrayElement([
              {
                field: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
                operator: faker.helpers.arrayElement([
                  faker.helpers.arrayElement([
                    "equals",
                    "notEquals",
                    "contains",
                    "greaterThan",
                    "lessThan",
                  ] as const),
                  undefined,
                ]),
                value: faker.helpers.arrayElement([
                  faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    faker.number.float({
                      min: undefined,
                      max: undefined,
                      fractionDigits: 2,
                    }),
                    faker.datatype.boolean(),
                  ]),
                  undefined,
                ]),
              },
              undefined,
            ]),
          },
          undefined,
        ]),
      })),
      undefined,
    ]),
    version: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    validationRules: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        ...{
          required: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          minLength: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          maxLength: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          min: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          max: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          pattern: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          customMessage: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        },
        ...{
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          name: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          rules: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            undefined,
          ]),
        },
      })),
      undefined,
    ]),
  }));

export const getGetFormsIdResponseMock = (
  overrideResponse: Partial<Form> = {},
): Form => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  title: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      version: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      author: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      tags: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        undefined,
      ]),
      lastModified: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
    },
    undefined,
  ]),
  fields: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    type: faker.helpers.arrayElement([
      "text",
      "email",
      "tel",
      "url",
      "number",
      "date",
      "datetime-local",
      "checkbox",
      "select",
      "radio",
      "textarea",
      "file",
    ] as const),
    label: faker.string.alpha({ length: { min: 10, max: 20 } }),
    required: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    defaultValue: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        faker.datatype.boolean(),
      ]),
      undefined,
    ]),
    placeholder: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    helpText: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    validation: faker.helpers.arrayElement([
      {
        required: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        minLength: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        maxLength: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        min: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        max: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        pattern: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        customMessage: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
      },
      undefined,
    ]),
    options: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          {
            value: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            label: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
          },
        ]),
      ),
      undefined,
    ]),
    conditional: faker.helpers.arrayElement([
      {
        show: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
        when: faker.helpers.arrayElement([
          {
            field: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            operator: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                "equals",
                "notEquals",
                "contains",
                "greaterThan",
                "lessThan",
              ] as const),
              undefined,
            ]),
            value: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                faker.datatype.boolean(),
              ]),
              undefined,
            ]),
          },
          undefined,
        ]),
      },
      undefined,
    ]),
  })),
  steps: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      order: faker.number.int({ min: undefined, max: undefined }),
      fields: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      conditionalLogic: faker.helpers.arrayElement([
        {
          show: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          when: faker.helpers.arrayElement([
            {
              field: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              operator: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  "equals",
                  "notEquals",
                  "contains",
                  "greaterThan",
                  "lessThan",
                ] as const),
                undefined,
              ]),
              value: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2,
                  }),
                  faker.datatype.boolean(),
                ]),
                undefined,
              ]),
            },
            undefined,
          ]),
        },
        undefined,
      ]),
    })),
    undefined,
  ]),
  version: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  validationRules: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      ...{
        required: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        minLength: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        maxLength: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        min: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        max: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        pattern: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        customMessage: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
      },
      ...{
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        rules: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          undefined,
        ]),
      },
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetFormsIdOpenapiResponseMock = ():
  | GetFormsIdOpenapi200One
  | string => faker.helpers.arrayElement([{}, faker.word.sample()]);

export const getPostFormsIdValidateResponseMock = (
  overrideResponse: Partial<PostFormsIdValidate200> = {},
): PostFormsIdValidate200 => ({
  valid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  timestamp: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostFormsIdSubmitResponseMock = (
  overrideResponse: Partial<PostFormsIdSubmit201> = {},
): PostFormsIdSubmit201 => ({
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  submissionId: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  timestamp: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTablesMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/tables", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetTablesTableNameMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/tables/:tableName", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostUploadSchemaMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/upload-schema", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getGetFormsMockHandler = (
  overrideResponse?:
    | Form[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Form[]> | Form[]),
) => {
  return http.get("*/forms", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetFormsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostFormsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/forms", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getGetFormsIdMockHandler = (
  overrideResponse?:
    | Form
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Form> | Form),
) => {
  return http.get("*/forms/:id", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetFormsIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetFormsIdOpenapiMockHandler = (
  overrideResponse?:
    | GetFormsIdOpenapi200One
    | string
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetFormsIdOpenapi200One | string>
        | GetFormsIdOpenapi200One
        | string),
) => {
  return http.get("*/forms/:id/_openapi", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetFormsIdOpenapiResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostFormsIdValidateMockHandler = (
  overrideResponse?:
    | PostFormsIdValidate200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostFormsIdValidate200> | PostFormsIdValidate200),
) => {
  return http.post("*/forms/:id/validate", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostFormsIdValidateResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostFormsIdSubmitMockHandler = (
  overrideResponse?:
    | PostFormsIdSubmit201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostFormsIdSubmit201> | PostFormsIdSubmit201),
) => {
  return http.post("*/forms/:id/submit", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostFormsIdSubmitResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getFormsAPIMock = () => [
  getGetTablesMockHandler(),
  getGetTablesTableNameMockHandler(),
  getPostUploadSchemaMockHandler(),
  getGetFormsMockHandler(),
  getPostFormsMockHandler(),
  getGetFormsIdMockHandler(),
  getGetFormsIdOpenapiMockHandler(),
  getPostFormsIdValidateMockHandler(),
  getPostFormsIdSubmitMockHandler(),
];
