/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Forms API
 * API for dynamic forms
 * OpenAPI spec version: 1.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';

import { SqlType } from './models';
import type { Form, SqlSchema } from './models';

export const getFormsControllerFindAllResponseMock = (): Form[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    meta: {
      ...{
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        title: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        author: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          undefined,
        ]),
        tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
          () => faker.string.alpha({ length: { min: 10, max: 20 } })
        ),
        version: faker.helpers.arrayElement([{}, undefined]),
      },
    },
    schema: {},
  }));

export const getFormsControllerCreateResponseMock = (
  overrideResponse: Partial<Form> = {}
): Form => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  meta: {
    ...{
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      author: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.string.alpha({ length: { min: 10, max: 20 } })
      ),
      version: faker.helpers.arrayElement([{}, undefined]),
    },
  },
  schema: {},
  ...overrideResponse,
});

export const getFormsControllerFindByTagsResponseMock = (): Form[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    meta: {
      ...{
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        title: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        author: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          undefined,
        ]),
        tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
          () => faker.string.alpha({ length: { min: 10, max: 20 } })
        ),
        version: faker.helpers.arrayElement([{}, undefined]),
      },
    },
    schema: {},
  }));

export const getFormsControllerFindOneResponseMock = (
  overrideResponse: Partial<Form> = {}
): Form => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  meta: {
    ...{
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      author: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.string.alpha({ length: { min: 10, max: 20 } })
      ),
      version: faker.helpers.arrayElement([{}, undefined]),
    },
  },
  schema: {},
  ...overrideResponse,
});

export const getFormsControllerPatchResponseMock = (
  overrideResponse: Partial<Form> = {}
): Form => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  meta: {
    ...{
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      author: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.string.alpha({ length: { min: 10, max: 20 } })
      ),
      version: faker.helpers.arrayElement([{}, undefined]),
    },
  },
  schema: {},
  ...overrideResponse,
});

export const getSqlSchemaControllerFindAllResponseMock = (): SqlSchema[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    meta: {
      ...{
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        title: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        author: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          undefined,
        ]),
        tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
          () => faker.string.alpha({ length: { min: 10, max: 20 } })
        ),
        version: faker.helpers.arrayElement([{}, undefined]),
      },
    },
    tables: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => ({
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        columns: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
          () => ({
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            type: faker.helpers.arrayElement(Object.values(SqlType)),
            maxLength: faker.helpers.arrayElement([
              faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
              undefined,
            ]),
            minLength: faker.helpers.arrayElement([
              faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
              undefined,
            ]),
            nullable: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
            primaryKey: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
            defaultValue: faker.helpers.arrayElement([{}, undefined]),
            foreignKey: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
          })
        ),
        relationships: faker.helpers.arrayElement([
          Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
            faker.string.alpha({ length: { min: 10, max: 20 } })
          ),
          undefined,
        ]),
      })
    ),
  }));

export const getSqlSchemaControllerCreateResponseMock = (
  overrideResponse: Partial<SqlSchema> = {}
): SqlSchema => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  meta: {
    ...{
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      author: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.string.alpha({ length: { min: 10, max: 20 } })
      ),
      version: faker.helpers.arrayElement([{}, undefined]),
    },
  },
  tables: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      columns: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          type: faker.helpers.arrayElement(Object.values(SqlType)),
          maxLength: faker.helpers.arrayElement([
            faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
            undefined,
          ]),
          minLength: faker.helpers.arrayElement([
            faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
            undefined,
          ]),
          nullable: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
          primaryKey: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
          defaultValue: faker.helpers.arrayElement([{}, undefined]),
          foreignKey: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        })
      ),
      relationships: faker.helpers.arrayElement([
        Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
          faker.string.alpha({ length: { min: 10, max: 20 } })
        ),
        undefined,
      ]),
    })
  ),
  ...overrideResponse,
});

export const getSqlSchemaControllerFindOneResponseMock = (
  overrideResponse: Partial<SqlSchema> = {}
): SqlSchema => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  meta: {
    ...{
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      author: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.string.alpha({ length: { min: 10, max: 20 } })
      ),
      version: faker.helpers.arrayElement([{}, undefined]),
    },
  },
  tables: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      columns: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          type: faker.helpers.arrayElement(Object.values(SqlType)),
          maxLength: faker.helpers.arrayElement([
            faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
            undefined,
          ]),
          minLength: faker.helpers.arrayElement([
            faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
            undefined,
          ]),
          nullable: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
          primaryKey: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
          defaultValue: faker.helpers.arrayElement([{}, undefined]),
          foreignKey: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        })
      ),
      relationships: faker.helpers.arrayElement([
        Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
          faker.string.alpha({ length: { min: 10, max: 20 } })
        ),
        undefined,
      ]),
    })
  ),
  ...overrideResponse,
});

export const getSqlSchemaControllerPatchResponseMock = (
  overrideResponse: Partial<SqlSchema> = {}
): SqlSchema => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  meta: {
    ...{
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      author: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.string.alpha({ length: { min: 10, max: 20 } })
      ),
      version: faker.helpers.arrayElement([{}, undefined]),
    },
  },
  tables: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      columns: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          type: faker.helpers.arrayElement(Object.values(SqlType)),
          maxLength: faker.helpers.arrayElement([
            faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
            undefined,
          ]),
          minLength: faker.helpers.arrayElement([
            faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
            undefined,
          ]),
          nullable: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
          primaryKey: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
          defaultValue: faker.helpers.arrayElement([{}, undefined]),
          foreignKey: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        })
      ),
      relationships: faker.helpers.arrayElement([
        Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
          faker.string.alpha({ length: { min: 10, max: 20 } })
        ),
        undefined,
      ]),
    })
  ),
  ...overrideResponse,
});

export const getAppControllerGetHelloMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)
) => {
  return http.get('*/', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getFormsControllerFindAllMockHandler = (
  overrideResponse?:
    | Form[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Form[]> | Form[])
) => {
  return http.get('*/forms', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFormsControllerFindAllResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getFormsControllerCreateMockHandler = (
  overrideResponse?:
    | Form
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Form> | Form)
) => {
  return http.post('*/forms', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFormsControllerCreateResponseMock()
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getFormsControllerFindByTagsMockHandler = (
  overrideResponse?:
    | Form[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Form[]> | Form[])
) => {
  return http.get('*/forms/tags/:tags', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFormsControllerFindByTagsResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getFormsControllerFindOneMockHandler = (
  overrideResponse?:
    | Form
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Form> | Form)
) => {
  return http.get('*/forms/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFormsControllerFindOneResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getFormsControllerPatchMockHandler = (
  overrideResponse?:
    | Form
    | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<Form> | Form)
) => {
  return http.patch('*/forms/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFormsControllerPatchResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getFormsControllerRemoveMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)
) => {
  return http.delete('*/forms/:id', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getSqlSchemaControllerFindAllMockHandler = (
  overrideResponse?:
    | SqlSchema[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SqlSchema[]> | SqlSchema[])
) => {
  return http.get('*/sqlschema', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getSqlSchemaControllerFindAllResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getSqlSchemaControllerCreateMockHandler = (
  overrideResponse?:
    | SqlSchema
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SqlSchema> | SqlSchema)
) => {
  return http.post('*/sqlschema', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getSqlSchemaControllerCreateResponseMock()
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getSqlSchemaControllerFindOneMockHandler = (
  overrideResponse?:
    | SqlSchema
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SqlSchema> | SqlSchema)
) => {
  return http.get('*/sqlschema/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getSqlSchemaControllerFindOneResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getSqlSchemaControllerPatchMockHandler = (
  overrideResponse?:
    | SqlSchema
    | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<SqlSchema> | SqlSchema)
) => {
  return http.patch('*/sqlschema/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getSqlSchemaControllerPatchResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getSqlSchemaControllerRemoveMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)
) => {
  return http.delete('*/sqlschema/:id', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};
export const getFormsAPIMock = () => [
  getAppControllerGetHelloMockHandler(),
  getFormsControllerFindAllMockHandler(),
  getFormsControllerCreateMockHandler(),
  getFormsControllerFindByTagsMockHandler(),
  getFormsControllerFindOneMockHandler(),
  getFormsControllerPatchMockHandler(),
  getFormsControllerRemoveMockHandler(),
  getSqlSchemaControllerFindAllMockHandler(),
  getSqlSchemaControllerCreateMockHandler(),
  getSqlSchemaControllerFindOneMockHandler(),
  getSqlSchemaControllerPatchMockHandler(),
  getSqlSchemaControllerRemoveMockHandler(),
];
