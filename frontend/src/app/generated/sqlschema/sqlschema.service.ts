/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Forms API
 * API for dynamic forms
 * OpenAPI spec version: 1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable } from '@angular/core';

import { Observable } from 'rxjs';

import type { SqlSchema } from '.././models';

type HttpClientOptions = {
  headers?:
    | HttpHeaders
    | {
        [header: string]: string | string[];
      };
  context?: HttpContext;
  observe?: any;
  params?:
    | HttpParams
    | {
        [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
      };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};

@Injectable({ providedIn: 'root' })
export class SqlschemaService {
  constructor(private http: HttpClient) {}
  sqlSchemaControllerFindAll<TData = SqlSchema[]>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  sqlSchemaControllerFindAll<TData = SqlSchema[]>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  sqlSchemaControllerFindAll<TData = SqlSchema[]>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  sqlSchemaControllerFindAll<TData = SqlSchema[]>(options?: HttpClientOptions): Observable<TData> {
    return this.http.get<TData>(`/sqlschema`, options);
  }
  sqlSchemaControllerCreate<TData = SqlSchema>(
    sqlSchema: SqlSchema,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  sqlSchemaControllerCreate<TData = SqlSchema>(
    sqlSchema: SqlSchema,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  sqlSchemaControllerCreate<TData = SqlSchema>(
    sqlSchema: SqlSchema,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  sqlSchemaControllerCreate<TData = SqlSchema>(
    sqlSchema: SqlSchema,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(`/sqlschema`, sqlSchema, options);
  }
  sqlSchemaControllerFindOne<TData = SqlSchema>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  sqlSchemaControllerFindOne<TData = SqlSchema>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  sqlSchemaControllerFindOne<TData = SqlSchema>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  sqlSchemaControllerFindOne<TData = SqlSchema>(
    id: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/sqlschema/${id}`, options);
  }
  sqlSchemaControllerPatch<TData = SqlSchema>(
    id: string,
    sqlSchema: SqlSchema,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  sqlSchemaControllerPatch<TData = SqlSchema>(
    id: string,
    sqlSchema: SqlSchema,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  sqlSchemaControllerPatch<TData = SqlSchema>(
    id: string,
    sqlSchema: SqlSchema,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  sqlSchemaControllerPatch<TData = SqlSchema>(
    id: string,
    sqlSchema: SqlSchema,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.patch<TData>(`/sqlschema/${id}`, sqlSchema, options);
  }
  sqlSchemaControllerRemove<TData = void>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  sqlSchemaControllerRemove<TData = void>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  sqlSchemaControllerRemove<TData = void>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  sqlSchemaControllerRemove<TData = void>(
    id: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.delete<TData>(`/sqlschema/${id}`, options);
  }
}

export type SqlSchemaControllerFindAllClientResult = NonNullable<SqlSchema[]>;
export type SqlSchemaControllerCreateClientResult = NonNullable<SqlSchema>;
export type SqlSchemaControllerFindOneClientResult = NonNullable<SqlSchema>;
export type SqlSchemaControllerPatchClientResult = NonNullable<SqlSchema>;
export type SqlSchemaControllerRemoveClientResult = NonNullable<void>;
