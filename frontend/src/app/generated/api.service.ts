/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Forms API
 * A comprehensive API for managing dynamic forms with OpenAPI validation
 * OpenAPI spec version: 1.0.0
 */
import { HttpClient } from "@angular/common/http";
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from "@angular/common/http";

import { Injectable } from "@angular/core";

import { Observable } from "rxjs";

import type {
  Form,
  GetFormsIdOpenapi200One,
  PostFormsIdSubmit201,
  PostFormsIdSubmitBody,
  PostFormsIdValidate200,
  PostFormsIdValidateBody,
  PostUploadSchemaBody,
} from "./models";

type HttpClientOptions = {
  headers?:
    | HttpHeaders
    | {
        [header: string]: string | string[];
      };
  context?: HttpContext;
  observe?: any;
  params?:
    | HttpParams
    | {
        [param: string]:
          | string
          | number
          | boolean
          | ReadonlyArray<string | number | boolean>;
      };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};

@Injectable({ providedIn: "root" })
export class FormsAPIService {
  constructor(private http: HttpClient) {} /**
   * @summary Get all table schemas
   */
  getTables<TData = void>(
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
  ): Observable<TData>;
  getTables<TData = void>(
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
  ): Observable<AngularHttpResponse<TData>>;
  getTables<TData = void>(
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
  ): Observable<HttpEvent<TData>>;
  getTables<TData = void>(options?: HttpClientOptions): Observable<TData> {
    return this.http.get<TData>(`/tables`, options);
  }

  /**
   * @summary Get specific table schema
   */
  getTablesTableName<TData = void>(
    tableName: string,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
  ): Observable<TData>;
  getTablesTableName<TData = void>(
    tableName: string,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
  ): Observable<AngularHttpResponse<TData>>;
  getTablesTableName<TData = void>(
    tableName: string,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
  ): Observable<HttpEvent<TData>>;
  getTablesTableName<TData = void>(
    tableName: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(`/tables/${tableName}`, options);
  }

  /**
   * @summary Upload SQL schema
   */
  postUploadSchema<TData = void>(
    postUploadSchemaBody: PostUploadSchemaBody,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
  ): Observable<TData>;
  postUploadSchema<TData = void>(
    postUploadSchemaBody: PostUploadSchemaBody,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
  ): Observable<AngularHttpResponse<TData>>;
  postUploadSchema<TData = void>(
    postUploadSchemaBody: PostUploadSchemaBody,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
  ): Observable<HttpEvent<TData>>;
  postUploadSchema<TData = void>(
    postUploadSchemaBody: PostUploadSchemaBody,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/upload-schema`,
      postUploadSchemaBody,
      options,
    );
  }

  /**
   * @summary Get all forms
   */
  getForms<TData = Form[]>(
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
  ): Observable<TData>;
  getForms<TData = Form[]>(
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
  ): Observable<AngularHttpResponse<TData>>;
  getForms<TData = Form[]>(
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
  ): Observable<HttpEvent<TData>>;
  getForms<TData = Form[]>(options?: HttpClientOptions): Observable<TData> {
    return this.http.get<TData>(`/forms`, options);
  }

  /**
   * @summary Create a new form
   */
  postForms<TData = void>(
    form: Form,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
  ): Observable<TData>;
  postForms<TData = void>(
    form: Form,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
  ): Observable<AngularHttpResponse<TData>>;
  postForms<TData = void>(
    form: Form,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
  ): Observable<HttpEvent<TData>>;
  postForms<TData = void>(
    form: Form,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(`/forms`, form, options);
  }

  /**
   * @summary Get a specific form
   */
  getFormsId<TData = Form>(
    id: string,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
  ): Observable<TData>;
  getFormsId<TData = Form>(
    id: string,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
  ): Observable<AngularHttpResponse<TData>>;
  getFormsId<TData = Form>(
    id: string,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
  ): Observable<HttpEvent<TData>>;
  getFormsId<TData = Form>(
    id: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(`/forms/${id}`, options);
  }

  /**
   * @summary Get OpenAPI specification for a form
   */
  getFormsIdOpenapi<TData = GetFormsIdOpenapi200One | string>(
    id: string,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
  ): Observable<TData>;
  getFormsIdOpenapi<TData = GetFormsIdOpenapi200One | string>(
    id: string,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
  ): Observable<AngularHttpResponse<TData>>;
  getFormsIdOpenapi<TData = GetFormsIdOpenapi200One | string>(
    id: string,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
  ): Observable<HttpEvent<TData>>;
  getFormsIdOpenapi<TData = GetFormsIdOpenapi200One | string>(
    id: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(`/forms/${id}/_openapi`, options);
  }

  /**
   * @summary Validate form data
   */
  postFormsIdValidate<TData = PostFormsIdValidate200>(
    id: string,
    postFormsIdValidateBody: PostFormsIdValidateBody,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
  ): Observable<TData>;
  postFormsIdValidate<TData = PostFormsIdValidate200>(
    id: string,
    postFormsIdValidateBody: PostFormsIdValidateBody,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
  ): Observable<AngularHttpResponse<TData>>;
  postFormsIdValidate<TData = PostFormsIdValidate200>(
    id: string,
    postFormsIdValidateBody: PostFormsIdValidateBody,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
  ): Observable<HttpEvent<TData>>;
  postFormsIdValidate<TData = PostFormsIdValidate200>(
    id: string,
    postFormsIdValidateBody: PostFormsIdValidateBody,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/forms/${id}/validate`,
      postFormsIdValidateBody,
      options,
    );
  }

  /**
   * @summary Submit form data
   */
  postFormsIdSubmit<TData = PostFormsIdSubmit201>(
    id: string,
    postFormsIdSubmitBody: PostFormsIdSubmitBody,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
  ): Observable<TData>;
  postFormsIdSubmit<TData = PostFormsIdSubmit201>(
    id: string,
    postFormsIdSubmitBody: PostFormsIdSubmitBody,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
  ): Observable<AngularHttpResponse<TData>>;
  postFormsIdSubmit<TData = PostFormsIdSubmit201>(
    id: string,
    postFormsIdSubmitBody: PostFormsIdSubmitBody,
    options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
  ): Observable<HttpEvent<TData>>;
  postFormsIdSubmit<TData = PostFormsIdSubmit201>(
    id: string,
    postFormsIdSubmitBody: PostFormsIdSubmitBody,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/forms/${id}/submit`,
      postFormsIdSubmitBody,
      options,
    );
  }
}

export type GetTablesClientResult = NonNullable<void>;
export type GetTablesTableNameClientResult = NonNullable<void>;
export type PostUploadSchemaClientResult = NonNullable<void>;
export type GetFormsClientResult = NonNullable<Form[]>;
export type PostFormsClientResult = NonNullable<void>;
export type GetFormsIdClientResult = NonNullable<Form>;
export type GetFormsIdOpenapiClientResult = NonNullable<
  GetFormsIdOpenapi200One | string
>;
export type PostFormsIdValidateClientResult =
  NonNullable<PostFormsIdValidate200>;
export type PostFormsIdSubmitClientResult = NonNullable<PostFormsIdSubmit201>;
